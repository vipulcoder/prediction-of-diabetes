# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hk69EsugxpPm881DWM1VwmSw7Xd-R-NC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
import seaborn as sns

from google.colab import files
data=files.upload()

df=pd.read_csv("/content/Dataset of Diabetes 1 (1).csv")

df

arr=np.array(df)
arr

df.isnull().sum()

df.isnull().sum().sum()

df.shape

df.replace({'Gender':{'M':0,'F':1}},inplace=True)

x=df.drop(columns='ID',axis=1)
df=x

x=df.drop(columns='CLASS',axis=1)
y=df['CLASS']
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=(0.3))
train_x.shape

train_x

test_x.shape

test_x

pd.DataFrame(train_x).describe()

train_y.shape

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
train_x_sc=sc.fit_transform(train_x)
pd.DataFrame(train_x_sc).describe()

from sklearn.linear_model import Perceptron
p=Perceptron()
p.fit(train_x_sc,train_y)
train_pred=p.predict(train_x_sc)
test_pred=p.predict(test_x)

from sklearn.metrics import accuracy_score
print('Training Accuracy =',accuracy_score(train_pred,train_y))

print('Test Accuracy =',accuracy_score(test_y,test_pred))

from sklearn.svm import SVC
svc=SVC()

svc.fit(train_x_sc,train_y)

train_pred_svc=svc.predict(train_x_sc)
test_pred_svc=svc.predict(test_x)

print("Training",accuracy_score(train_pred_svc,train_y))

print("Test",accuracy_score(test_pred_svc,test_y))

svc1=SVC(kernel="rbf",C=0.5)
svc1.fit(train_x_sc,train_y)
train_pred_svc1=svc1.predict(train_x_sc)
test_pred_svc1=svc1.predict(test_x)

print("Train",accuracy_score(train_pred_svc1,train_y))

print("test",accuracy_score(test_pred_svc1,test_y))

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=3)
knn.fit(train_x_sc,train_y)
train_pred_knn=knn.predict(train_x_sc)
test_pred_knn=knn.predict(test_x)

print("Train accuracy",accuracy_score(train_pred_knn,train_y))
print("test accuracy",accuracy_score(test_pred_knn,test_y))

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(train_x_sc,train_y)
train_pred_dt=dt.predict(train_x_sc)
test_pred_dt=dt.predict(test_x)

print("Training",accuracy_score(train_pred_dt,train_y))
print("testing",accuracy_score(test_pred_dt,test_y))

dt1=DecisionTreeClassifier(criterion='entropy')
dt1.fit(train_x_sc,train_y)
train_pred_dt1=dt1.predict(train_x_sc)
test_pred_dt1=dt1.predict(test_x)

print("Training value",accuracy_score(train_pred_dt1,train_y))
print("testing value",accuracy_score(test_pred_dt1,test_y))

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(train_x_sc,train_y)
train_pred_rf=rf.predict(train_x_sc)
test_pred_rf=rf.predict(test_x)

print("Training",accuracy_score(train_pred_rf,train_y))
print("Testing",accuracy_score(test_pred_rf,test_y))

from sklearn.ensemble import VotingClassifier

p=Perceptron()
svm=SVC()
knn=KNeighborsClassifier()

vc=VotingClassifier(estimators=[('perceptron',p),('svm',svm),('knn',knn)],voting='hard', weights=[3,1,1])
vc.fit(train_x_sc,train_y)
train_pred_vc=vc.predict(train_x_sc)
test_pred_vc=vc.predict(test_x)

print("Training",accuracy_score(train_pred_vc,train_y))
print("Testing",accuracy_score(test_pred_vc,test_y))

from sklearn.ensemble import BaggingClassifier
bag=BaggingClassifier(base_estimator=knn,n_estimators=20)
bag.fit(train_x_sc,train_y)
train_pred_bag=bag.predict(train_x_sc)
test_pred_bag=bag.predict(test_x)

print("Training",accuracy_score(train_pred_bag,train_y))
print("Testing",accuracy_score(test_pred_bag,test_y))

cols=df.columns

cols

sns.pairplot(df)
plt.show()